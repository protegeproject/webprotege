; Thu Apr 11 16:35:40 PDT 2013
; 
;+ (version "3.4.8")
;+ (build "Build 629")


(defclass %3ACLIPS_TOP_LEVEL_SLOT_CLASS "Fake class to save top-level slot information"
	(is-a USER)
	(role abstract)
	(single-slot propertyName
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot lastLogin
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot allowedOperation
		(type INSTANCE)
;+		(allowed-classes Operation)
		(create-accessor read-write))
	(multislot group
		(type INSTANCE)
;+		(allowed-classes Group)
		(default [metaproject_Instance_0])
;+		(inverse-slot member)
		(create-accessor read-write))
	(single-slot hostName
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot member
		(type INSTANCE)
;+		(allowed-classes User)
;+		(inverse-slot group)
		(create-accessor read-write))
	(multislot allowedGroupOperation
		(type INSTANCE)
;+		(allowed-classes GroupOperation)
		(create-accessor read-write))
	(single-slot description
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot lastAccess
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot properties
		(type INSTANCE)
;+		(allowed-classes PropertyValue)
		(create-accessor read-write))
	(single-slot owner
		(type INSTANCE)
;+		(allowed-classes User)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot annotationProject
		(type INSTANCE)
;+		(allowed-classes Project)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot inTrash
		(type SYMBOL)
		(allowed-values FALSE TRUE)
		(default FALSE)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot password
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot salt
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot location
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot name_
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot email
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot allowedGroup
		(type INSTANCE)
;+		(allowed-classes Group)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot propertyValue
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass User
	(is-a USER)
	(role concrete)
	(single-slot lastAccess
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot lastLogin
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot properties
		(type INSTANCE)
;+		(allowed-classes PropertyValue)
		(create-accessor read-write))
	(single-slot salt
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot group
		(type INSTANCE)
;+		(allowed-classes Group)
		(default [metaproject_Instance_0])
		(create-accessor read-write))
	(single-slot password
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot name_
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot email
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot description
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass Operation "An operation that occurs during the lifecycle of a project that should be subject to access control.  For example, the READ operation implies the ability to view a project and the EDIT operation implies the ability to read and modify a project."
	(is-a USER)
	(role concrete)
	(multislot properties
		(type INSTANCE)
;+		(allowed-classes PropertyValue)
		(create-accessor read-write))
	(single-slot name_
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot description
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass GroupAppliedOperation
	(is-a Operation)
	(role concrete))

(defclass ProjectAppliedOperation
	(is-a Operation)
	(role concrete))

(defclass ServerAppliedOperation
	(is-a Operation)
	(role concrete))

(defclass GroupOperation
	(is-a USER)
	(role concrete)
	(multislot properties
		(type INSTANCE)
;+		(allowed-classes PropertyValue)
		(create-accessor read-write))
	(single-slot allowedGroup
		(type INSTANCE)
;+		(allowed-classes Group)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot allowedOperation
		(type INSTANCE)
;+		(allowed-classes Operation)
		(create-accessor read-write)))

(defclass PolicyControlledObject
	(is-a USER)
	(role concrete)
	(multislot properties
		(type INSTANCE)
;+		(allowed-classes PropertyValue)
		(create-accessor read-write))
	(single-slot name_
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(multislot allowedGroupOperation
		(type INSTANCE)
;+		(allowed-classes GroupOperation)
		(create-accessor read-write))
	(single-slot description
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass Project "This class represents the class of all projects.  When the server reads this ontology, it examines each instance of this class and attempts to load the project associated with that instance.  The only two fields that the server examines are the location, which represents the location of the project file in the file system (relative paths  are allowed) and the name, which represents the string thhat is shown to the user so the user  can choose a project to edit."
	(is-a PolicyControlledObject)
	(role concrete)
	(single-slot owner
		(type INSTANCE)
;+		(allowed-classes User)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot annotationProject
		(type INSTANCE)
;+		(allowed-classes Project)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot inTrash
		(type SYMBOL)
		(allowed-values FALSE TRUE)
		(default FALSE)
;+		(cardinality 1 1)
		(create-accessor read-write))
	(single-slot location
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass Server
	(is-a PolicyControlledObject)
	(role concrete)
	(single-slot hostName
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write)))

(defclass Group "Groups of users for the convenience of the policy administrator.  If a group is called World then it will implicitly be assumed that it  includes every user."
	(is-a PolicyControlledObject)
	(role concrete)
	(multislot member
		(type INSTANCE)
;+		(allowed-classes User)
		(create-accessor read-write)))

(defclass PropertyValue
	(is-a USER)
	(role concrete)
	(single-slot propertyName
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write))
	(single-slot propertyValue
		(type STRING)
;+		(cardinality 0 1)
		(create-accessor read-write)))